@using WebClient.Abstractions
@using WebClient.Shared.Models
@using Domain.ViewModel
@using Microsoft.AspNetCore.Mvc;

@inject ITaskDataService taskDataService;
@inject IMemberDataService memberDataService;

@namespace WebClient.Components

<style>
    .task-wrapper .header {
        color: #000000;
        font-size: 32px;
        line-height: 48px;
        font-family: "Poppins SemiBold";
    }

    .task-wrapper .task-item {
        background: #FFFFFF;
        border: 1px solid #C5C9C9;
        box-sizing: border-box;
        border-radius: 8px;
        font-size: 24px;
        font-family: "Poppins Light";
    }

        .task-wrapper .task-item .save-icon {
            width: 25px;
            /*height: 25px;
            display: flex;
            align-self: flex-start;*/
        }

    .task-item .fa {
        font-size: 20px;
    }

    .done-text {
        text-decoration: line-through;
    }

    .task-wrapper .avtar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    @@media(max-width: 1400px) {
        .task-wrapper .task-item {
            font-size: 16px;
        }

        .task-wrapper .avtar {
            width: 24px;
            height: 24px;
        }

        .delete-icon {
            width: 25px;
        }

        .save-icon {
            width: 25px;
            /*display: flex;
            align-self:inherit;
            flex-wrap: wrap;*/
        }
    }

    @@media(max-width: 767.98px) {
        .task-wrapper .avtar {
            width: 16px;
            height: 16px;
        }
    }
</style>
<stylesheet>

</stylesheet>

<div class="task-wrapper">
    @if (paramFamilyTaskToDo != null && paramFamilyTaskToDo.Length > 0)
    {
        @foreach (var item in paramFamilyTaskToDo)
        {
            <div class="task-item p-3 my-3 row m-0">
                <div class="col-7 p-0">
                    @if (item.Id != Guid.Empty)
                    {
                        <Check TValue="bool" Checked="@item.IsComplete" CheckedChanged="@(val => ToggleTask(item))">
                            <span class="@(item.IsComplete ? "done-text" : "")">@item.Subject</span>
                        </Check>
                    }
                    else
                    {
                        <span class="@(item.IsComplete ? "done-text" : "")" style="color: @alertAvatar;">@item.Subject</span>
                    }
                </div>
                <div class="col-5 p-0 d-flex d-flex align-items-center justify-content-end ">
                    <!-- -->
                    <div class="avtar mr-1 col-1" style="background-color: @item.Avatar;"></div>
                    @if (item.Id != Guid.Empty)
                    {
                        <div class="mr-1 col-2 d-flex">
                            <button class="btn btn-default" style="height: 25px;width: 25px;" @onclick="@(e => SaveCompleteTaskClicked(e))">
                                <img class="save-icon" style="margin-right: 20px; margin-bottom: 20px" src="/assets/images/save-regular.svg" />                                
                            </button>
                        </div>
                        <div class="mr-1 col-2">
                            <img class="delete-icon" src="/assets/images/delete-icon.svg" />
                        </div>
                    }
                </div>
            </div>
        }
    }
    else
    {
        <div class="task-item p-3 my-3 row m-0">
            <div class="col-10 p-0">
                <span class="@(false ? "done-text" : "")" style="color:red;">@noTaskFound</span>
            </div>
            <div class="col-2 p-0 d-flex d-flex justify-content-end align-items-center">
                <div class="avtar mr-1" style="background-color:red;"></div>
            </div>
        </div>

    }
</div>


@code  {

    #region Declare Parameters and Variables

    [Parameter]
    public TaskToDoModel[] paramFamilyTaskToDo { get; set; }

    [Parameter]
    public EventCallback<MouseEventArgs> OnSaveCompleteTaskClicked { get; set; }

    private const string noAssociatedTaskText = "No task found associated with the selected member";
    private const string noTaskFound = "No task were Found";
    private const string alertAvatar = "Red";
    private TaskVm taskModel;
    private bool isFirstRender;

    #endregion

    protected override Task OnInitializedAsync()
    {
        taskModel = taskDataService.SelectedTask ?? new TaskVm();

        memberDataService.SelectedMemberChanged += MemberService_SelectedMemberChanged;
        taskDataService.TasksChanged += TaskDataService_TasksChanged;

        paramFamilyTaskToDo = taskDataService.PopulateLoadedTasks(taskDataService.EnumTasksToDo.ToList(), memberDataService.SelectedMember, memberDataService);

        return base.OnInitializedAsync();
    }

    #region Event Handlers

    private void MemberService_SelectedMemberChanged(object sender, EventArgs e)
    {
        if (memberDataService.SelectedMember != null) LoadMemberWiseTasks(memberDataService.SelectedMember);
    }

    private void TaskDataService_TasksChanged(object sender, EventArgs e)
    {
        taskModel = taskDataService.SelectedTask ?? new TaskVm();
        if (!isFirstRender) paramFamilyTaskToDo = taskDataService.PopulateLoadedTasks(taskDataService.EnumTasksToDo.ToList(), memberDataService.SelectedMember, memberDataService);
    }

    private void TaskDataService_SeletedTaskChanged(object sender, EventArgs e)
    {
        taskModel = taskDataService.SelectedTask ?? new TaskVm();
        //StateHasChanged();
    }

    protected async Task SaveCompleteTaskClicked(MouseEventArgs e)
    {
        await OnSaveCompleteTaskClicked.InvokeAsync(e);
    }

    #endregion

    #region Private Methods

    private void ToggleTask(TaskToDoModel model)
    {
        taskDataService.ToggleTask(model.Id);
        taskModel = taskDataService.SelectedTask ?? new TaskVm();
        //StateHasChanged();
    }

    private void LoadMemberWiseTasks(MemberVm selectedMember)
    {
        if (taskDataService.EnumTasksToDo.Count() > 0)
        {
            List<TaskVm> lstMemberTask = taskDataService.EnumTasksToDo.Where(t => t.AssignedToId == selectedMember.Id).ToList();

            if (lstMemberTask.Count > 0)
            {
                paramFamilyTaskToDo = taskDataService.PopulateLoadedTasks(lstMemberTask, selectedMember, memberDataService);
                StateHasChanged();
            }
            else
            {
                TaskToDoModel noTask = new TaskToDoModel();
                noTask.Id = Guid.Empty;
                noTask.Subject = noAssociatedTaskText;
                noTask.Avatar = (selectedMember != null) ? selectedMember.Avatar : alertAvatar;
                noTask.IsComplete = false;

                paramFamilyTaskToDo = new TaskToDoModel[1] { noTask };
            }
            StateHasChanged();
        }
    }

    private async void SaveTaskComplete()
    {
        if (taskDataService == null || taskDataService.SelectedTask == null) return;

        if (taskModel == null) taskModel = new TaskVm();

        taskModel.Id = Guid.NewGuid();
        taskModel.Subject = taskDataService.SelectedTask.Subject;
        taskModel.IsComplete = true;
        if (memberDataService != null && memberDataService.SelectedMember != null && memberDataService.SelectedMember.Id != Guid.Empty)
        {
            taskModel.AssignedToId = memberDataService.SelectedMember.Id;
        }
        else
            taskModel.AssignedToId = Guid.Empty;

        bool isCompleteSuccess = await taskDataService.CompleteTask(taskModel);
    }

    #endregion

}
